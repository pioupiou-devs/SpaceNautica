using UnityEngine;

public enum FaceRenderMask { All, Top, Bottom, Left, Right, Front, Back };

public class Planet : MonoBehaviour
{
    [Header("General Settings")]
    [SerializeField, Range(2, 256)]
    private int resolution = 10;
    [SerializeField]
    private bool autoUpdate = true;
    [SerializeField]
    private bool isAutoGenerated = false;
    [SerializeField, HideInInspector]
    private MeshFilter[] meshFilters;
    private TerrainFace[] terrainFaces;
    private GameObject chunks;

    [Header("Face Settings")]
    public FaceRenderMask faceRenderMask;

    [Header("Color Settings")]
    [HideInInspector]
    public bool colorSettingsFoldout;
    [SerializeField]
    public ColorSettings colorSettings;
    private ColorGenerator colorGenerator = new ColorGenerator();
    [SerializeField]
    internal Material _planetMaterial;
    internal Material planetMaterial;
    [SerializeField]
    internal Material _atmosphereMaterial;
    internal Material atmosphereMaterial;

    [Header("Shape Settings")]
    [HideInInspector]
    public bool shapeSettingsFoldout;
    [SerializeField]
    public ShapeSettings shapeSettings;
    private ShapeGenerator shapeGenerator = new ShapeGenerator();

    [Header("Noise Settings")]
    [HideInInspector]
    public bool noiseSettingsFoldout;

    void Initialize()
    {
        planetMaterial = new Material(_planetMaterial);
        atmosphereMaterial = new Material(_atmosphereMaterial);
        transform.parent.Find("Atmosphere").GetComponent<MeshRenderer>().material = atmosphereMaterial;

        if ((chunks = transform.Find("Chunks")?.gameObject) == null)
        {
            chunks = new GameObject("Chunks");
            chunks.transform.parent = transform;
            chunks.transform.localPosition = Vector3.zero;
        }

        if (meshFilters == null || meshFilters.Length == 0)
            meshFilters = new MeshFilter[6];

        if(isAutoGenerated)
        {
            ProceduralSettings proceduralSettings = new ProceduralSettings();
            colorSettings = proceduralSettings.colorSettings;
            shapeSettings = proceduralSettings.shapeSettings;
            
        }

        terrainFaces = new TerrainFace[6];
        shapeGenerator.UpdateSettings(shapeSettings);
        colorGenerator.UpdateSettings(colorSettings, this);

        planetMaterial.SetVector("_center", transform.position);

        Vector3[] directions = { Vector3.up, Vector3.down, Vector3.left, Vector3.right, Vector3.forward, Vector3.back };

       for (int i = 0; i < 6; i++)
        {
            if (meshFilters[i] == null)
            {
                GameObject meshObj = new GameObject($"Mesh{i}");
                meshObj.transform.parent = chunks.transform;
                meshObj.transform.localPosition = Vector3.zero;
                meshObj.AddComponent<MeshRenderer>();

                meshFilters[i] = meshObj.AddComponent<MeshFilter>();
                meshFilters[i].sharedMesh = new Mesh() { name = $"Mesh{i}" };
            }
            
            meshFilters[i].GetComponent<MeshRenderer>().sharedMaterial = planetMaterial;
            
            terrainFaces[i] = new TerrainFace(shapeGenerator, meshFilters[i].sharedMesh, resolution, directions[i]);
            bool renderFace = faceRenderMask == FaceRenderMask.All || (int)faceRenderMask - 1 == i;
            meshFilters[i].gameObject.SetActive(renderFace);
        }
    }

    #region Events
    public void OnShapeSettingsUpdated()
    {
        if (autoUpdate)
        {
            Initialize();
            GenerateMesh();
        }
    }

    public void OnColorSettingsUpdated()
    {
        if (autoUpdate)
        {
            Initialize();
            GenerateColors();
        }
    }

    public void OnNoiseSettingsUpdated()
    {
        if (autoUpdate)
        {
            Initialize();
            GenerateMesh();
        }
    }

    #endregion Events

    #region Generators

    public void GeneratePlanet()
    {
        float startTime = Time.realtimeSinceStartup;
        Initialize();
        GenerateMesh();
        GenerateColors();

        Transform atmosTransform =  transform.parent.Find("Atmosphere");
        atmosTransform.localScale = Vector3.one * shapeSettings.planetRadius * 0.35f;
        atmosTransform.localPosition = Vector3.zero;

        float endTime = Time.realtimeSinceStartup;
        Debug.Log($"GeneratePlanet() took {endTime - startTime} seconds");
    }

    private void GenerateMesh()
    {
        for (int i = 0; i < 6; i++)
        {
            if (meshFilters[i].gameObject.activeSelf){
                terrainFaces[i].ConstructMesh();
                terrainFaces[i].mesh.Optimize();
            }
        }

        colorGenerator.UpdateElevation(shapeGenerator.elevationMinMax);
    }

    private void GenerateColors()
    {
        colorGenerator.UpdateColors();
        
    }
    #endregion Generators
}
