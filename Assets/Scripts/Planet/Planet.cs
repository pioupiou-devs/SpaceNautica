using UnityEditor;
using UnityEngine;

public enum FaceRenderMask { All, Top, Bottom, Left, Right, Front, Back };

public class Planet : MonoBehaviour
{
    [Header("General Settings")]
    [SerializeField, Range(2, 256)]
    private int resolution = 10;
    [SerializeField]
    private bool autoUpdate = true;
    [SerializeField]
    private bool isAutoGenerated = false;
    [SerializeField, HideInInspector]
    private MeshFilter[] meshFilters;
    private TerrainFace[] terrainFaces;
    private GameObject chunks;

    private ProceduralSettings proceduralSettings;

    [Header("Face Settings")]
    public FaceRenderMask faceRenderMask;

    [Header("Color Settings")]
    [HideInInspector]
    public bool colorSettingsFoldout;
    [SerializeField]
    public ColorSettings colorSettings;
    private ColorGenerator colorGenerator = new ColorGenerator();
    private string colorSettingsPath;
    [SerializeField]
    internal Material _planetMaterial;
    internal Material planetMaterial;
    private string planetMaterialPath;
    [SerializeField]
    internal Material _atmosphereMaterial;
    internal Material atmosphereMaterial;
    private string atmosphereMaterialPath;

    [Header("Shape Settings")]
    [HideInInspector]
    public bool shapeSettingsFoldout;
    [SerializeField]
    public ShapeSettings shapeSettings;
    private ShapeGenerator shapeGenerator = new ShapeGenerator();
    private string shapeSettingsPath;

    [Header("Noise Settings")]
    [HideInInspector]
    public bool noiseSettingsFoldout;

    private void Start()
    {
        LoadSettings();
        GeneratePlanet();
    }

    void Initialize()
    {
        planetMaterial = new Material(_planetMaterial);
        atmosphereMaterial = new Material(_atmosphereMaterial);
        transform.parent.Find("Atmosphere").GetComponent<MeshRenderer>().material = atmosphereMaterial;

        if ((chunks = transform.Find("Chunks")?.gameObject) == null)
        {
            chunks = new GameObject("Chunks");
            chunks.transform.parent = transform;
            chunks.transform.localPosition = Vector3.zero;
        }

        if (meshFilters == null || meshFilters.Length == 0)
            meshFilters = new MeshFilter[6];

        if (isAutoGenerated)
        {
            proceduralSettings = new ProceduralSettings();
            colorSettings = proceduralSettings.colorSettings;
            shapeSettings = proceduralSettings.shapeSettings;

        }

        terrainFaces = new TerrainFace[6];
        shapeGenerator.UpdateSettings(shapeSettings);
        colorGenerator.UpdateSettings(colorSettings, this);

        planetMaterial.SetVector("_center", transform.position);

        Vector3[] directions = { Vector3.up, Vector3.down, Vector3.left, Vector3.right, Vector3.forward, Vector3.back };

        for (int i = 0; i < 6; i++)
        {
            if (meshFilters[i] == null)
            {
                GameObject meshObj = new GameObject($"Mesh{i}");
                meshObj.transform.parent = chunks.transform;
                meshObj.transform.localPosition = Vector3.zero;
                meshObj.AddComponent<MeshRenderer>();

                meshFilters[i] = meshObj.AddComponent<MeshFilter>();
                meshFilters[i].sharedMesh = new Mesh() { name = $"Mesh{i}" };
            }

            meshFilters[i].GetComponent<MeshRenderer>().sharedMaterial = planetMaterial;

            terrainFaces[i] = new TerrainFace(shapeGenerator, meshFilters[i].sharedMesh, resolution, directions[i]);
            bool renderFace = faceRenderMask == FaceRenderMask.All || (int)faceRenderMask - 1 == i;
            meshFilters[i].gameObject.SetActive(renderFace);
        }
    }

    #region Events
    public void OnShapeSettingsUpdated()
    {
        if (autoUpdate)
        {
            Initialize();
            GenerateMesh();
        }
    }

    public void OnColorSettingsUpdated()
    {
        if (autoUpdate)
        {
            Initialize();
            GenerateColors();
        }
    }

    public void OnNoiseSettingsUpdated()
    {
        if (autoUpdate)
        {
            Initialize();
            GenerateMesh();
        }
    }

    #endregion Events

    #region Generators

    public void GeneratePlanet()
    {
        float startTime = Time.realtimeSinceStartup;
        Initialize();
        GenerateMesh();
        GenerateColors();

        Transform atmosTransform = transform.parent.Find("Atmosphere");
        atmosTransform.localScale = Vector3.one * shapeSettings.planetRadius * 0.35f;
        atmosTransform.localPosition = Vector3.zero;

        float endTime = Time.realtimeSinceStartup;
        Debug.Log($"GeneratePlanet() took {endTime - startTime} seconds");
    }

    private void GenerateMesh()
    {
        for (int i = 0; i < 6; i++)
        {
            if (meshFilters[i].gameObject.activeSelf)
            {
                terrainFaces[i].ConstructMesh();
                terrainFaces[i].mesh.Optimize();
            }
        }

        colorGenerator.UpdateElevation(shapeGenerator.elevationMinMax);
    }

    private void GenerateColors()
    {
        colorGenerator.UpdateColors();

    }
    #endregion Generators

    #region Save/Load

    public void Clear()
    {
        if (meshFilters != null)
        {
            foreach (MeshFilter meshFilter in meshFilters)
            {
                if (meshFilter != null)
                    DestroyImmediate(meshFilter.gameObject);
            }
        }

        if (chunks != null)
            DestroyImmediate(chunks);

        if (atmosphereMaterial != null)
            atmosphereMaterial.SetFloat("_opacity", 0f);
    }
    public void SaveSettings()
    {
        SaveColorSettings();
        SaveShapeSettings();
        SaveMaterials();
    }
    public void SaveColorSettings()
    {
        string path = EditorUtility.SaveFilePanelInProject("Save Color Settings", "New Color Settings", "asset", "Save Color Settings", "Assets");
        if (path == "")
            return;

        colorSettingsPath = path;
        
        if(AssetDatabase.LoadAssetAtPath<ColorSettings>(path) == null)
            AssetDatabase.CreateAsset(colorSettings, path);
        else
            AssetDatabase.SaveAssets();
    }
    public void SaveShapeSettings()
    {
        string path = EditorUtility.SaveFilePanelInProject("Save Shape Settings", "New Shape Settings", "asset", "Save Shape Settings", "Assets");
        if (path == "")
            return;

        shapeSettingsPath = path;

        if(AssetDatabase.LoadAssetAtPath<ShapeSettings>(path) == null)
            AssetDatabase.CreateAsset(shapeSettings, path);
        else
            AssetDatabase.SaveAssets();
    }
    public void SaveMaterials()
    {
        string path1 = EditorUtility.SaveFilePanelInProject("Save Planet Material", "New Planet Material", "asset", "Save Planet Material", "Assets");
        if (path1 == "")
            return;

        planetMaterialPath = path1;

        // create asset if it doesn't exist
        if (AssetDatabase.LoadAssetAtPath(path1, typeof(Material)) == null)
            AssetDatabase.CreateAsset(planetMaterial, path1);
        else
            AssetDatabase.SaveAssets();

        string path2 = EditorUtility.SaveFilePanelInProject("Save Atmosphere Material", "New Atmosphere Material", "asset", "Save Atmosphere Material", "Assets");
        if (path2 == "")
            return;

        atmosphereMaterialPath = path2;

        if (AssetDatabase.LoadAssetAtPath(path2, typeof(Material)) == null)
            AssetDatabase.CreateAsset(atmosphereMaterial, path2);
        else
            AssetDatabase.SaveAssets();
    }


    public void LoadSettings()
    {
        LoadColorSettings();
        LoadShapeSettings();
        LoadMaterials();
    }
    public void LoadColorSettings()
    {
        Debug.Log(colorSettingsPath);
        ColorSettings loadedColorSettings = AssetDatabase.LoadAssetAtPath<ColorSettings>(colorSettingsPath);
        if (loadedColorSettings != null)
        {
            colorSettings = loadedColorSettings;
            colorGenerator.UpdateSettings(colorSettings, this);
        }
    }
    public void LoadShapeSettings()
    {
        ShapeSettings loadedShapeSettings = AssetDatabase.LoadAssetAtPath<ShapeSettings>(shapeSettingsPath);
        if (loadedShapeSettings != null)
        {
            shapeSettings = loadedShapeSettings;
            shapeGenerator.UpdateSettings(shapeSettings);
        }
    }
    public void LoadMaterials()
    {
        Material loadedPlanetMaterial = AssetDatabase.LoadAssetAtPath<Material>(planetMaterialPath);
        if (loadedPlanetMaterial != null)
        {
            planetMaterial = loadedPlanetMaterial;
        }

        Material loadedAtmosphereMaterial = AssetDatabase.LoadAssetAtPath<Material>(atmosphereMaterialPath);
        if (loadedAtmosphereMaterial != null)
        {
            atmosphereMaterial = loadedAtmosphereMaterial;
        }
    }
    #endregion Save/Load
}
